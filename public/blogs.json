[
    {
      "blog_id": 1,
      "blog_img": "https://i.ibb.co/phcvVW4/image.png",
      "posted_date": "2023-10-15",
      "blog_title": "Introduction & Usage of  access token and refresh token in Client Side ",
      "desc": "Authentication and Authorization is one of many important and necessary features that are required for a good and modern industry-grade web applications. While Authentication means validating a user while logging in a website, Authorization means ensuring that only authorized users can access certain resources and features. In a React web application, this process often involves the use of access tokens and refresh tokens to securely manage user sessions and maintain user identity. In this blog, we will discuss the concepts of access tokens and refresh tokens, and the usage of JWT tokens also storing them into the Client Side. What Is Access Token? Access tokens are short-lived, time-bound secret tokens generated by token providers, in our case JWT, that grant access to specific resources or secure APIs on behalf of the authenticated user. They act as temporary keys, allowing a user to interact with the application's protected resources without revealing their username and password with each request. Mostly and in a wide range these days, access tokens are often used to authorize API calls and restrict access to protected routes. Usage of Access Tokens: When a user logs in, the React application sends their credentials to the authentication server with the request. Upon successful authentication, the server generates an access token with JWT sign() method, which is then sent back to the web application as a cookie. It's important to store access tokens securely. One common approach is to use browser storage mechanisms like localStorage or sessionStorage, but this approach of storing data may expose tokens to cross-site scripting (XSS) attacks. That's why a more secure option is to use HTTP-only cookies. Sending Access Tokens: For each request to protected resources or APIs, the web application includes the access token in the request headers or sends it as a cookie. This helps the server identify the user and authorize their actions. Access tokens have a limited lifespan, typically ranging from minutes to hours. When an access token expires, the user must re-authenticate to obtain a new one. What Are Refresh Tokens? Refresh tokens are long-lived tokens which have a longer lifespan than an access token. They are used to request new access tokens without forcing the user to log in again. They play a crucial role in maintaining user sessions and ensuring a seamless user experience. Usage of Refresh Tokens in React: Upon successful login, the authentication server issues both an access token and a refresh token to the web application. Refresh tokens should be stored more securely than access tokens because they have a longer lifespan. Storing them as HTTP-only cookies is a common practice. When a user's access token has been expired, refresh tokens are used to generate a new one from a server, so the user won't even understand the delay. Access tokens and refresh tokens are essential components in managing user authentication in React web applications. They provide a secure and user-friendly way to protect sensitive resources. By exploring the usage of access and refresh tokens, you can create a robust and secure authentication system for web application."
   
    },
    {
      "blog_id": 2,
      "blog_img": "https://i.ibb.co/25H4Zs3/Express-JS-vs-Nest-JS-5-Differences-That-You-Should-Know.gif",
      "posted_date": "2023-09-28",
      "blog_title": "Exploring Express js  & Nest JS ",
      "desc": "When it comes to building web applications using Node.js, developers have a huge choice of frameworks and libraries at their need. Among them, two popular choices are Express.js and Nest.js, each with its own unique set of features and use cases. In this blog, we will explore Express.js and Nest.js, highlighting their differences and their usage.\n\nExpress.js: The Minimalist Framework.\n\nExpress.js, often referred to simply as Express, is a minimal and flexible Node.js web application framework. It provides a simple and lightweight structure to build web and mobile application server, making it an excellent choice for developers who prefer a more hands-on approach. Express.js is known for its simplicity and wide adoption in the Node.js ecosystem.\n\nUse Cases for Express.js\n\n1. RESTful APIs: Express.js is ideal for building RESTful APIs. Its straightforward routing system and middleware support make it easy to create and manage API endpoints.\n\n2. Microservices: Express.js is well-suited for developing microservices, allowing you to create and deploy small, independent services quickly.\n\n3. Rapid Prototyping: When you need to build a simple prototype or a quick proof of concept, Express.js is a great choice due to its minimalistic design and low learning curve.\n\n4. Customization: Express.js gives you the flexibility to structure your application as you see fit. You have the freedom to add middleware and features based on your specific requirements.\n\nNest.js: The Opinionated Framework\n\nNest.js is a modern, opinionated Node.js framework that is designed to help developers build scalable and maintainable applications. It follows the modular and structured architecture of Angular, making it an excellent choice for large and complex projects. Nest.js encourages best practices and enforces a set of conventions, which can be advantageous for teams working on a shared codebase.\n\nUse Cases for Nest.js\n\n1. Nest.js shines when you're working on large-scale applications with complex requirements. Its modular architecture, dependency injection system, and built-in features like GraphQL support can simplify development.\n\n2. For building enterprise-grade applications, Nest.js provides a strong foundation for maintaining code quality and organization. It includes features like testing utilities and documentation generation to ensure high-quality code.\n\n3. When you need to build real-time applications using technologies like WebSockets, Nest.js's built-in support for WebSockets and microservices can be a game-changer.\n\n4. Teams and Collaboration: Nest.js enforces a clear project structure and coding standards, making it a great choice for teams of developers who need to collaborate on a project.\n\nThe choice between Express.js and Nest.js ultimately depends on the nature of your project and your team's preferences. If you're building a simple RESTful API or a lightweight microservice, Express.js's simplicity and flexibility may be more appealing. On the other hand, if your project is large, complex, or requires strict adherence to best practices, Nest.js can help ensure code maintainability and scalability."
    },
    {
      "blog_id": 3,
      "blog_img": "https://i.ibb.co/R43yjHR/0f8b2870896edcde8f6149fe2733faaf.jpg",
      "posted_date": "2023-08-10",
      "blog_title": "Explaing My Code",
      "desc": "This project is intermediate level full stack web application.This project has all the necessary features and services you can expect from a full stack web application.This Project is also a CRUD application at the same time , it connects to a databse , in our case we have used Mongo DB .  The Project is made with React , React Router , Tailwind CSS , Daisy UI , Framer Motion , Tanstack Query , Axios etc and  a  lot of third party packages for the Front end part . Firebase Authentication is used for user Authentication . On the backend and server side , this application is depending on node js and express js along with Mongo DB for a database .  The file structure of this porject is very clear declarative and simple . The components and the pages along with all the different individual features for this website is well structured in file based system .We are using axios to connec and perform resftul api and methods so it is secure and more manageable for us to control use request . This project is taking input form user and stroing it to a databse and at the same time by using the REST methods as well ."
    }
  ]
  